classdef ModelWrapper < falcon.core.Handle & matlab.mixin.Heterogeneous & matlab.mixin.Copyable
    % Create a generic model wrapper instance.
    %  
    % <Syntax>
    % model = falcon.ModelWrapper(modelFunction)
    % model = falcon.ModelWrapper(modelFunction).specialize()
    %  
    % <Description>
    % Given a model function handle that was generated by the FALCON
    % model builder framework, create a basic ModelWrapper object.
    % This wrapper has no specific model knowledge.  It can, however,
    % create and organize all model variables and store a set of model
    % constants.  Model-specific features need to be implemented in
    % subclasses.  To associate a model with a specific wrapper class,
    % pass the optional arguments 'ModelWrapperClass', 'className' to
    % the model builder object.  The class name is stored in the model.
    % Then you can create a generic model wrapper and call its
    % specialize() method to obtain an instance of the correct
    % subclass.  The recommended way of using a model wrapper is to
    % call falcon.ModelWrapper(modelFunction).specialize().
    %  
    % Please note that the ModelWrapper class is a handle class.
    %  
    % <Inputs>
    % > modelFunction: a function handle generated by FALCON
    %  
    % <Outputs>
    % > model: a ModelWrapper object

    % -------------------------------------------------------------------------
    %                                FALCON.m
    % Copyright (c) 2014-2019 Institute of Flight System Dynamics, TUM, Munich
    % Matthias Bittner, Matthias Rieck, Maximilian Richter,
    % Benedikt Grueter, Johannes Diepolder, Florian Schwaiger,
    % Patrick Piprek, and Florian Holzapfel
    % Downloading, using, copying, or modifying FALCON.m code constitutes an
    % agreement to ALL of the terms of the FALCON.m EULA.
    % -------------------------------------------------------------------------

    properties
        % The low-level model function
        ModelFunction
        % The low-level model info struct
        ModelInfo
        % A struct with fields 'States', 'Controls', 'Parameters' and 'Outputs'
        % that hold the corresponding model variables after createVariables()
        % is called
        VariablesByType
        % The low-level cell array of model constants that are passed to the
        % model with every call to evaluate()
        ModelConstantsCell
    end

    methods
        function variables = setupDefaultVariableAttributes(self, variables)
        % Initialize variable attributes (bounds, scaling, offset).
        %  
        % <Syntax>
        % variables = model.setupDefaultVariableAttributes(variables)
        %  
        % <Description>
        % In the generic falcon.ModelWrapper this method has no effect.
        % Model-specific subclasses may override it to intialize the
        % bounds, scalings and offsets of
        % states/controls/parameters/outputs based on model-specific
        % knowledge.  For example, a wrapper subclass can store a
        % model-specific configuration data structure and derive variable
        % attributes from this.  The setupDefaultVariableAttributes()
        % method is called automatically by createVariables().
        %  
        % <Inputs>
        % variables: Object array of type falcon.State, falcon.Control,
        %            falcon.Parameter, falcon.Output, or falcon.OVC.  When
        %            setupDefaultVariableAttributes() is called by
        %            createVariables(), the variables are passed in a
        %            heterogeneous array in the following order: states,
        %            controls, parameters, outputs.
        %  
        % <Outputs>
        % variables: The input array is passed through.  Object identity
        %            must be preserved, but attributes can be modified.
        end

        function varargout = getOutputElementNames(self)
        % Extract output element names from the model info struct.
        %  
        % <Syntax>
        % % Example
        % [statesdotNames, outputNames] = model.getOutputElementNames()
        end

        function varargout = evaluateDirect(self, varargin)
        % Evaluate the low-level model function.
        %  
        % <Description>
        % Evaluate the low-level model function directly.  All inputs,
        % including the model constants, need to be specified.
        end

        function varargout = evaluate(self, varargin)
        % Evaluate the model.
        %  
        % <Description>
        % Evaluate the model function with given state/control/parameter
        % inputs.  Constant inputs are taken from the model constants
        % stored in the wrapper object.
        %  
        % <Inputs>
        % > states: state values (if required by the model)
        % > controls: control values (if required by the model)
        % > parameters: parameter values (if required by the model)
        end

        function self = setConstantsCell(self, constants, ~)
        % Set the model constants by index.
        %  
        % <Description>
        % Index-based assignment of model constants from a cell array.  It
        % is recommended to call setConstants() instead.
        %  
        % <Inputs>
        % > constants: a cell array holding the constant values in the
        %   order specified by listRequiredConstants()
        end

        function self = setConstantsStruct(self, constants, options)
        % Set the model constants by name.
        %  
        % <Description>
        % Name-based assignment of model constants from a struct.  It is
        % recommended to call setConstants() instead.
        %  
        % <Inputs>
        % > constants: a struct holding the constant values
        % > options: struct with options, see setConstants()
        end

        function self = setConstants(self, constants, varargin)
        % Set the model constants.
        %  
        % <Description>
        % Set the model constants, either as cell array or as a struct
        % (recommended).
        %  
        % <Inputs>
        % > constants: either a cell array with constant values ordered
        %   according to the model info struct (see
        %   listRequiredConstants()), or a scalar struct with fields
        %   defining the constant values by name (recommended)
        %  
        % <NameValue>
        % > IgnoreUnknown: logical flag indicating if unknown constants
        %   should be ignored (default=true); only applies to struct inputs
        end

        function self = setConstant(self, name, value)
        % Set a model constant.
        %  
        % <Description>
        % Set the model constant by providing its name and value
        %  
        % <Inputs>
        % > name: string or char of modelname
        % > value: numerical value of constant
        end

        function constants = getConstants(self)
        % Get a struct of model constants.
        %  
        % <Description>
        % If model constants have been assigned in the wrapper object, this
        % method returns them as a struct for convenient name-based access.
        %  
        % <Outputs>
        % > constants: struct (field names: constant input names, values:
        %   values from the model constants array)
        end

        function constants = listRequiredConstants(self)
        % List the constant inputs required by the model function.
        %  
        % <Description>
        % This extracts the list of constant inputs from the low-level
        % model info struct.
        %  
        % <Output>
        % > constants: struct array with variable attributes
        end

        function constraints = getConstraints(self)
        % falcon.ModelWrapper/getConstraints is a function.
        %   [constraints] = getConstraints(self)
        end

        function outputs = getOutputs(self)
        % Get the model outputs.
        %  
        % <Description>
        % Return the model outputs (only after createVariables() has
        % been called).
        %  
        % <Outputs>
        % > outputs: falcon.Output array
        end

        function parameters = getParameters(self)
        % Get the model parameters.
        %  
        % <Description>
        % Return the model parameters (only after createVariables()
        % has been called).
        %  
        % <Outputs>
        % > parameters: falcon.Parameter array
        end

        function controls = getControls(self)
        % Get the model controls.
        %  
        % <Description>
        % Return the model controls (only after createVariables()
        % has been called).
        %  
        % <Outputs>
        % > controls: falcon.Control array
        end

        function states = getStates(self)
        % Get the model states.
        %  
        % <Description>
        % Return the model states (only after createVariables() has been
        % called).
        %  
        % <Outputs>
        % > states: falcon.State array
        end

        function [varsByType, varList] = createVariables(self)
        % Create states, controls, parameters and outputs.
        %  
        % <Descriptions>
        % This method analyzes the low-level model info struct provided by
        % the model function handle, and creates the corresponding state,
        % control, parameter and output objects.  Furthermore, the
        % setupDefaultVariableAttributes() method is applied to all
        % variables.  Subclasses may override this method and use
        % model-specific knowledge to apply variable
        % bounds/scalings/offsets, for example based on a parameter set
        % stored in the subclass wrapper object.
        %  
        % <Outputs>
        % > varsByType: A struct with fields
        %               States (falcon.State array),
        %               Controls (falcon.Control array),
        %               Parameters (falcon.Parameter array),
        %               Outputs (falcon.Output array).
        % > varList: A heterogenous array of type falcon.core.OVC
        %            holding the model variables in the order of states,
        %            controls, parameters and outputs.  By this definition,
        %            it is guaranteed that variables that appear as
        %            decision variables in the NLP generated by FALCON are
        %            listed before those that can only appear as constraint
        %            values.
        end

        function modelInfo = getInfo(self)
        % Get the low-level model info struct.
        %  
        % <Description>
        % This returns the low-level info struct provided by the FALCON
        % model function.
        %  
        % <Outputs>
        % > modelInfo: low-level model info struct
        end

        function instance = specialize(self)
        % Create a model-specific wrapper according to model attributes.
        %  
        % <Syntax>
        % model = genericModel.specialize()
        %  
        % <Description>
        % If a model function is linked to a specific wrapper class through
        % its info struct, the specialize() method returns an instance of
        % the respective class.  Otherwise, a new generic wrapper object is
        % created.  In any case, variables and model constants need to be
        % recreated; thus, it is recommended to call specialize() only
        % immediately after constructing a wrapper.  In other words, the
        % recommended way of using a model wrapper is to call
        % falcon.ModelWrapper(modelFunction).specialize().
        %  
        % <Outputs>
        % > instance: the new wrapper object
        end

        function modelFunction = getModelFunction(self)
        % Get the low-level model function.
        %  
        % <Syntax>
        % modelFunction = model.getModelFunction()
        %  
        % <Outputs>
        % > modelFunction: the FALCON model function handle stored in the
        %   wrapper
        end

        function self = setModelFunction(self, modelFunction)
        % Set the low-level model function.
        %  
        % <Syntax>
        % model = model.setModelFunction(modelFunction)
        %  
        % <Description>
        % This allows to switch to a different FALCON model.  It is not
        % recommended to use this method; create a new ModelWrapper object
        % instead.
        %  
        % <Inputs>
        % > modelFunction: a function handle generated by FALCON
        %  
        % <Output>
        % > model: a ModelWrapper object
        end

        function self = ModelWrapper(modelFunction)
        % Create a generic model wrapper instance.
        %  
        % <Syntax>
        % model = falcon.ModelWrapper(modelFunction)
        % model = falcon.ModelWrapper(modelFunction).specialize()
        %  
        % <Description>
        % Given a model function handle that was generated by the FALCON
        % model builder framework, create a basic ModelWrapper object.
        % This wrapper has no specific model knowledge.  It can, however,
        % create and organize all model variables and store a set of model
        % constants.  Model-specific features need to be implemented in
        % subclasses.  To associate a model with a specific wrapper class,
        % pass the optional arguments 'ModelWrapperClass', 'className' to
        % the model builder object.  The class name is stored in the model.
        % Then you can create a generic model wrapper and call its
        % specialize() method to obtain an instance of the correct
        % subclass.  The recommended way of using a model wrapper is to
        % call falcon.ModelWrapper(modelFunction).specialize().
        %  
        % Please note that the ModelWrapper class is a handle class.
        %  
        % <Inputs>
        % > modelFunction: a function handle generated by FALCON
        %  
        % <Outputs>
        % > model: a ModelWrapper object
        end

    end

end