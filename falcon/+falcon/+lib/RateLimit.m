classdef RateLimit < falcon.core.Handle
    % -------------------------------------------------------------------------
    %                                FALCON.m
    % Copyright (c) 2014-2019 Institute of Flight System Dynamics, TUM, Munich
    % Matthias Bittner, Matthias Rieck, Maximilian Richter,
    % Benedikt Grueter, Johannes Diepolder, Florian Schwaiger,
    % Patrick Piprek, and Florian Holzapfel
    % Downloading, using, copying, or modifying FALCON.m code constitutes an
    % agreement to ALL of the terms of the FALCON.m EULA.
    % -------------------------------------------------------------------------

    % -------------------------------------------------------------------------
    %                                FALCON.m
    % Copyright (c) 2014-2019 Institute of Flight System Dynamics, TUM, Munich
    % Matthias Bittner, Matthias Rieck, Maximilian Richter,
    % Benedikt Grueter, Johannes Diepolder, Florian Schwaiger,
    % Patrick Piprek, and Florian Holzapfel
    % Downloading, using, copying, or modifying FALCON.m code constitutes an
    % agreement to ALL of the terms of the FALCON.m EULA.
    % -------------------------------------------------------------------------

    properties
        % falcon.lib.RateLimit/Signals is a property.
        Signals
        % falcon.lib.RateLimit/Constraints is a property.
        Constraints
        % falcon.lib.RateLimit/Phase is a property.
        Phase
        % falcon.lib.RateLimit/NormalizedTime is a property.
        NormalizedTime
        % falcon.lib.RateLimit/PointFunction is a property.
        PointFunction
    end

    methods
        function self = RateLimit(varargin)
        % Create a finite-difference based rate limit.
        %  
        % <Syntax>
        % [ c ] = falcon.lib.RateLimit(signals, phase)
        % [ c ] = falcon.lib.RateLimit(..., 'Name', Value)
        %  
        % <Description>
        % Create a rate constraint of the form
        %   du.lb <= (u[k+1] - u[k]) / (t[k+1] - t[k]) <= du.ub
        % with a vector of variables u ( States, Controls,
        % and Outputs in arbitrary order); the subscript k represents a
        % sample index.
        %  
        % The generated object is automatically added as a point
        % constraint upon construction.
        %  
        % The function accepts inputs from a single phase only.  Note that
        % a rate limit within a phase does not prevent discontinuities
        % across phase boundaries.  To enforce a rate limit also across
        % phase boundaries, ensure continuity of the relevant signals
        % using a falcon.lib.ContinuityConstraint in addition to the
        % RateLimit.
        %  
        % <Inputs>
        % > signals: The relevant signals.  All of these must have the same
        %   type (State/Control/Parameter).
        % > phase: The phase where the rate limit is to be applied.
        %  
        % <NameValue>
        % > NormalizedTime: The samples to consider.
        %   Defaults to the state grid discretization of the given phase.
        %   Note that the finite difference approximation to the rates is
        %   not calculated at each sample, but between neighbouring
        %   samples.  If the actual discretization of the relevant signals
        %   is finer than the samples given here, the rate limit refers to
        %   the average rate between the given samples, which is usually
        %   not intended.
        % > Constraints: The constraints, given either as a scalar (valid
        %   for all signals / all time steps), a vector (corresponding to
        %   the number of signals) or a matrix (number of signals by number
        %   of time steps).
        %   Defaults to autogenerated unbounded constraints.
        end

        function info = describe(self)
        % FALCON.m model info.
        end

        function [val, jac, hess] = evaluate(self, varargin)
        % falcon.lib.RateLimit/evaluate is a function.
        %   [val, jac, hess] = evaluate(self, varargin)
        end

    end

end